{
  "atomCode": "CodeCCCheckAtom",
  "execution": {
    "packagePath": "CodeCCCheckAtom.jar",
    "language": "java",
    "minimumVersion": "1.8",
    "deFmands": [],
    "target": "$bk_java_path -Dfile.encoding=utf8 -jar CodeCCCheckAtom.jar"
  },
  "input": {
    "languages": {
      "rule": {},
      "type": "atom-checkbox-list",
      "required": true,
      "label": "Programming Language",
      "list": [],
      "default": [],
      "desc": "tools will match different programming language",
      "tabName": "basic"
    },
    "tools": {
      "rule": {},
      "required": true,
      "hidden": true,
      "type": "atom-checkbox-list",
      "label": "Code Review Tool",
      "list": [],
      "default": [],
      "tabName": "basic"
    },
    "asyncTask": {
      "rule": {},
      "type": "enum-input",
      "label": "Sync Method",
      "list": [
        {
          "value": false,
          "label": "Synchronize"
        },
        {
          "value": true,
          "label": "Asynchronous"
        }
      ],
      "default": false,
      "desc": "",
      "tabName": "main",
      "inline": true
    },
    "asyncTaskId": {
      "rule": {
        "asyncTaskRequired": true
      },
      "type": "task-select",
      "label": "Task",
      "required": true,
      "tabName": "async",
      "inline": true,
      "list": {},
      "default": "",
      "rely": {},
      "desc": "You can choose to create a task yourself in the CodeCC service, or you can directly enter the task ID. The task ID can be obtained from the CodeCC link (in /codecc/myproj/task/25324/, 25324 is the task ID). Support pipeline variables."
    },
    "goPath": {
      "rule": {},
      "type": "vuex-input",
      "label": "GOPATH",
      "default": "",
      "required": false,
      "desc": "Help find the code path of the dependent library to get a more useful result",
      "placeholder": "Relative paths under {WORKSPACE}, please use comma to separate multiple paths, support pipeline variables",
      "tabName": "basic",
      "inline": true,
      "rely": {
        "operation": "AND",
        "expression": [
          {
            "key": "tools",
            "value": "GOML"
          }
        ]
      }
    },
    "pyVersion": {
      "rule": {},
      "type": "enum-input",
      "label": "Python Version",
      "required": true,
      "list": [
        {
          "label": "Python2",
          "value": "py2"
        },
        {
          "label": "Python3",
          "value": "py3"
        }
      ],
      "default": "py3",
      "tabName": "basic",
      "inline": true,
      "rely": {
        "operation": "AND",
        "expression": [
          {
            "key": "tools",
            "value": "PYLINT"
          }
        ]
      }
    },
    "scriptType": {
      "rule": {},
      "type": "enum-input",
      "label": "Script Type",
      "required": true,
      "hidden": false,
      "list": [
        {
          "id": "sh",
          "value": "SHELL",
          "label": "Shell"
        }
      ],
      "default": "SHELL",
      "tabName": "basic",
      "lang": "sh",
      "inline": true
    },
    "script": {
      "rule": {
        "scriptRequired": true
      },
      "label": "Script",
      "hidden": false,
      "default": "#Coverity/Klocwork will compile your code by calling the compilation script to identify defects\n# Please use build tools such as maven/cmake to write a compilation script build.sh\n# Make sure build.sh can compile the code\n# cd path/to/build.sh\n# sh build.sh",
      "required": true,
      "type": "atom-ace-editor",
      "desc": "The corresponding tool will use this script to compile the code in order to track the compilation process and find code defects",
      "tabName": "basic"
    },
    "languageRuleSetMap": {
      "hidden": true,
      "default": {}
    },
    "C_CPP_RULE": {
      "rule": {
        "ruleSetRequired": true
      },
      "type": "rule-set-select",
      "label": "C/C++",
      "required": true,
      "tabName": "basic",
      "inline": true,
      "list": {},
      "default": [],
      "rely": {
        "operation": "AND",
        "expression": [
          {
            "key": "languages",
            "value": "C_CPP"
          }
        ]
      }
    },
    "multiPipelineMark": {
      "rule": {},
      "label": "label",
      "placeholder": "Optional. Only numbers, letters, and underscores are supported.",
      "type": "vuex-input",
      "default": "",
      "tabName": "basic",
      "desc": "If the pipeline has multiple code analysis plugins, a label can be used to distinguish them.",
      "inline": true
    },
    "toolScanType": {
      "rule": {},
      "type": "radio-group",
      "label": "Scan Method",
      "required": true,
      "list": [
        {
          "label": "Incremental Scanï¼ˆrecommended)",
          "value": "1"
        },
        {
          "label": "MR/PR Scan",
          "value": "2"
        },
        {
          "label": "Full Scan",
          "value": "0"
        }
      ],
      "default": "1",
      "desc": "Incremental scan: Scan the difference code between current build and previous build. Full scan will be used in the first time.\nMR/PR Scan: Scan the difference code between the source branch and the target branch of MR/PR. The source branch code needs to be pulled to the workspace\nFull Scan: Scan all codes. Klocwork, Pinpoint, Gometalinter, and repetition rate only support this scanning method."
    },
    "mrCommentEnable": {
      "label": "",
      "default": true,
      "type": "atom-checkbox",
      "text": "Sync the defect info to Tencent internal Git viewing page"
    },
    "newDefectJudgeFromDate": {
      "default": "",
      "label": "New Alerts Threshold",
      "desc": "Alerts sent after the selected date are New Alerts"
    },
    "transferAuthorList": {
      "default": [],
      "type": "author-transfer",
      "label": "change owner",
      "desc": "Alerts will sent to the new owner when the tools's ownership changed "
    },
    "path": {
      "default": [],
      "type": "item-edit"
    },
    "customPath": {
      "default": [],
      "type": "item-edit"
    },
    "openScanPrj": {
      "label": "",
      "default": false,
      "placeholder": "",
      "type": "atom-checkbox",
      "text": "use open sourced tool to scan project",
      "desc": "Use open sourced scanning tool when selected",
      "required": false,
      "disabled": false,
      "hidden": true
    }
  },
  "output": {
    "BK_CI_CODECC_TASK_ID": {
      "type": "string",
      "description": "CodeCC task id"
    },
    "BK_CI_CODECC_TASK_STATUS": {
      "type": "string",
      "description": "Whether the CodeCC task runs successfully"
    }
  },
  "releaseInfo": {
    "projectId": "demo",
    "name": "CodeCC Code Check",
    "language": "java",
    "logoUrl": "${{indexFile(\"images/logo.png\")}}",
    "category": "TASK",
    "classifyCode": "scm",
    "jobType": "AGENT",
    "os": ["LINUX", "MACOS", "WINDOWS"],
    "labelCodes": [],
    "summary":"Support all CodeCC code inspection tools under Linux, MacOS, and Windows systems, including code defects (bkcheck, etc.), security vulnerabilities (sensitive information, high-risk components, etc.), code specifications (CppLint, CheckStyle, etc.), cyclomatic complexity, repetition rate, etc. .",
    "description": "${{indexFile(\"doc/aboutCodeCC_en.md\")}}",
    "configInfo": {
      "frontendType": "SPECIAL"
    },
    "versionInfo": {
      "publisher": "admin",
      "releaseType": "NEW",
      "version": "1.0.0",
      "versionContent": "Test"
    }
  }
}